# OS: Debian
# Requirements:
# 1. Preinstalled Openstack and params exported to global env.
# 2. Key for instance was created in advance on openstack cluster. Use StrictHostKeyChecking=no is a must.
# 3. Check for apt packages at installation step. At the time of this code, the only postgresql version that apt supports is 15.
# 5. Check default user. For Ubuntu it's ubuntu, for Debian it's debian.
- name: Create instance
  hosts: all
  connection: local
  gather_facts: no #first one, no fact
  collections:
    - community.general
  vars:
    tf_dir:
    ssh_private_key: 
    tf_rc:
  tasks:
    - name: Copy .terraformrc
      copy:
        dest: "~/.terraformrc"
        src: "{{ tf_rc }}"
      changed_when: false

    - name: Ensure Terraform directory exists
      file:
        path: "{{ tf_dir }}"
        state: directory

    - name: Run tf
      community.general.terraform:
        project_path: "{{ tf_dir }}"
        # variables_files: "{{ tf_vars | default(omit) }}"
        state: present
        force_init: true # run terraform init if state file not found
      register:
        tfdata
  
    - name: Extract instance IP
      set_fact:
        instance_ip: "{{ tfdata.outputs.instance_ip.value }}"

    - name: Wait for a ssh port become available
      wait_for:
        host: "{{ instance_ip }}"
        port: 22

    - name: Add host to ansible ini 
      add_host:
        name: "{{ instance_ip }}"
        groups: prod
        ansible_ssh_host: "{{ instance_ip }}"
        ansible_port: 22
        ansible_user: "debian"
        ansible_ssh_private_key_file: "{{ ssh_private_key }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

- name: Upgrade apt
  hosts: prod
  become: yes
  tasks:
    - name: Upgrade
      apt:
        upgrade: yes
        
- name: Install Postgresql
  hosts: prod
  become: yes #sudo
  tasks:
    # - name: Update apt cache
    #   apt:
    #     upgrade: yes
    #   when: ansible_os_family == "Debian"

    - name: Set env vars
      set_fact:
        postgresql_version: 15 
        postgresql_service_name: postgresql
        postgresql_listen_addresses: "*"
        # cacheable: yes

    - name: Install PostgreSQL (Debian/Ubuntu)
      become: true
      apt:
        name:
          - postgresql-{{ postgresql_version }}
          - postgresql-contrib
          - libpq-dev
          - python3-psycopg2 
        state: present
        # update_cache: yes #install -> update cache

    - name: Enable Postgres
      service:
        name: "{{ postgresql_service_name }}"
        state: started
        enabled: yes
        
    - name: Set Postgres to listen on any addresses
      shell: |
       sudo -u postgres psql -c 'ALTER SYSTEM SET listen_addresses="{{ postgresql_listen_addresses }}";'
       sudo -u postgres psql -c 'SELECT pg_reload_conf();'
      
- name: Install Docker
  hosts: prod
  become: yes #sudo
  # gather_facts: yes
  # remote_user: debian   
  vars:
    docker_prerequisites:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - software-properties-common

    docker_packages: #https://docs.docker.com/engine/install/debian/
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin 
      - docker-compose-plugin

  tasks:
    - name: Install required system packages
      package:
        name: "{{ docker_prerequisites }}"
        state: present
        # update_cache: yes

    - name: Add Docker GPG apt key (Debian/Ubuntu)
      # when: ansible_os_family == "Debian"
      apt_key:
        url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
        state: present

    - name: Add Docker repository (Debian/Ubuntu)
      # when: ansible_os_family == "Debian"
      apt_repository:
        repo: deb [arch={{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable #https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_vars_facts.html#ansible-facts
        state: present
        filename: docker

    # Install Docker
    - name: Install Docker and Docker compose
      package:
        name: "{{ docker_packages }}"
        state: present
        # update_cache: yes
      notify: restart docker

    - name: Create Docker config directory #https://docs.docker.com/engine/install/debian/#install-using-the-repository
      file:
        path: /etc/docker
        state: directory
        mode: '0755'

  handlers:
    - name: restart docker
      service:
        name: docker
        state: restarted